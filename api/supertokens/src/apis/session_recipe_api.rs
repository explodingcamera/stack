/*
 * Core Driver Interface
 *
 * This is the API exposed by the SuperTokens Core. To be consumed by your backend only.
 *
 * The version of the OpenAPI document: 2.15.1
 * Contact: team@supertokens.io
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`create_new_session`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateNewSessionError {
    Status400(String),
    Status401(crate::models::RequestUnauthorised),
    Status404(crate::models::NotFound),
    Status500(crate::models::InternalError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_session`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteSessionError {
    Status400(String),
    Status401(crate::models::RequestUnauthorised),
    Status404(crate::models::NotFound),
    Status500(crate::models::InternalError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_jwt_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetJwtDataError {
    Status400(String),
    Status401(crate::models::RequestUnauthorised),
    Status404(crate::models::NotFound),
    Status500(crate::models::InternalError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_session_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSessionDataError {
    Status400(String),
    Status401(crate::models::RequestUnauthorised),
    Status404(crate::models::NotFound),
    Status500(crate::models::InternalError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_session_info`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSessionInfoError {
    Status400(String),
    Status401(crate::models::RequestUnauthorised),
    Status404(crate::models::NotFound),
    Status500(crate::models::InternalError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_user_session_handles`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetUserSessionHandlesError {
    Status400(String),
    Status401(crate::models::RequestUnauthorised),
    Status404(crate::models::NotFound),
    Status500(crate::models::InternalError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`put_jwt_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutJwtDataError {
    Status400(String),
    Status401(crate::models::RequestUnauthorised),
    Status404(crate::models::NotFound),
    Status500(crate::models::InternalError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`put_session_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutSessionDataError {
    Status400(String),
    Status401(crate::models::RequestUnauthorised),
    Status404(crate::models::NotFound),
    Status500(crate::models::InternalError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`refresh_session`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RefreshSessionError {
    Status400(String),
    Status401(crate::models::RequestUnauthorised),
    Status404(crate::models::NotFound),
    Status500(crate::models::InternalError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`regenerate_session`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RegenerateSessionError {
    Status400(String),
    Status401(crate::models::RequestUnauthorised),
    Status404(crate::models::NotFound),
    Status500(crate::models::InternalError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`session_handshake`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SessionHandshakeError {
    Status400(String),
    Status401(crate::models::RequestUnauthorised),
    Status404(crate::models::NotFound),
    Status500(crate::models::InternalError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`verify_session`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VerifySessionError {
    Status400(String),
    Status401(crate::models::RequestUnauthorised),
    Status404(crate::models::NotFound),
    Status500(crate::models::InternalError),
    UnknownValue(serde_json::Value),
}


/// Create a new Session  
pub async fn create_new_session(configuration: &configuration::Configuration, cdi_version: &str, rid: Option<&str>, api_key: Option<&str>, create_new_session_request: Option<crate::models::CreateNewSessionRequest>) -> Result<crate::models::CreateNewSession200Response, Error<CreateNewSessionError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/recipe/session", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = rid {
        local_var_req_builder = local_var_req_builder.header("rid", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = api_key {
        local_var_req_builder = local_var_req_builder.header("api-key", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.header("cdi-version", cdi_version.to_string());
    local_var_req_builder = local_var_req_builder.json(&create_new_session_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateNewSessionError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Delete a sesion 
pub async fn delete_session(configuration: &configuration::Configuration, cdi_version: &str, rid: Option<&str>, api_key: Option<&str>, delete_session_request: Option<crate::models::DeleteSessionRequest>) -> Result<crate::models::DeleteSession200Response, Error<DeleteSessionError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/recipe/session/remove", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = rid {
        local_var_req_builder = local_var_req_builder.header("rid", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = api_key {
        local_var_req_builder = local_var_req_builder.header("api-key", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.header("cdi-version", cdi_version.to_string());
    local_var_req_builder = local_var_req_builder.json(&delete_session_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DeleteSessionError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get JWT data for a session 
pub async fn get_jwt_data(configuration: &configuration::Configuration, cdi_version: &str, rid: Option<&str>, api_key: Option<&str>, session_handle: Option<&str>) -> Result<crate::models::GetJwtData200Response, Error<GetJwtDataError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/recipe/jwt/data", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = session_handle {
        local_var_req_builder = local_var_req_builder.query(&[("sessionHandle", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = rid {
        local_var_req_builder = local_var_req_builder.header("rid", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = api_key {
        local_var_req_builder = local_var_req_builder.header("api-key", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.header("cdi-version", cdi_version.to_string());

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetJwtDataError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get session data 
pub async fn get_session_data(configuration: &configuration::Configuration, cdi_version: &str, rid: Option<&str>, api_key: Option<&str>, session_handle: Option<&str>) -> Result<crate::models::GetSessionData200Response, Error<GetSessionDataError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/recipe/session/data", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = session_handle {
        local_var_req_builder = local_var_req_builder.query(&[("sessionHandle", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = rid {
        local_var_req_builder = local_var_req_builder.header("rid", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = api_key {
        local_var_req_builder = local_var_req_builder.header("api-key", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.header("cdi-version", cdi_version.to_string());

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetSessionDataError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get user and session information for a given session handle 
pub async fn get_session_info(configuration: &configuration::Configuration, cdi_version: &str, rid: Option<&str>, api_key: Option<&str>, session_handle: Option<&str>) -> Result<crate::models::GetSessionInfo200Response, Error<GetSessionInfoError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/recipe/session", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = session_handle {
        local_var_req_builder = local_var_req_builder.query(&[("sessionHandle", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = rid {
        local_var_req_builder = local_var_req_builder.header("rid", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = api_key {
        local_var_req_builder = local_var_req_builder.header("api-key", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.header("cdi-version", cdi_version.to_string());

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetSessionInfoError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get session handles for a user 
pub async fn get_user_session_handles(configuration: &configuration::Configuration, cdi_version: &str, rid: Option<&str>, api_key: Option<&str>, user_id: Option<&str>) -> Result<crate::models::GetUserSessionHandles200Response, Error<GetUserSessionHandlesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/recipe/session/user", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = user_id {
        local_var_req_builder = local_var_req_builder.query(&[("userId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = rid {
        local_var_req_builder = local_var_req_builder.header("rid", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = api_key {
        local_var_req_builder = local_var_req_builder.header("api-key", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.header("cdi-version", cdi_version.to_string());

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetUserSessionHandlesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Change JWT data for a session 
pub async fn put_jwt_data(configuration: &configuration::Configuration, cdi_version: &str, rid: Option<&str>, api_key: Option<&str>, put_jwt_data_request: Option<crate::models::PutJwtDataRequest>) -> Result<crate::models::PutSessionData200Response, Error<PutJwtDataError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/recipe/jwt/data", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = rid {
        local_var_req_builder = local_var_req_builder.header("rid", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = api_key {
        local_var_req_builder = local_var_req_builder.header("api-key", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.header("cdi-version", cdi_version.to_string());
    local_var_req_builder = local_var_req_builder.json(&put_jwt_data_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PutJwtDataError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Change session data 
pub async fn put_session_data(configuration: &configuration::Configuration, cdi_version: &str, rid: Option<&str>, api_key: Option<&str>, put_session_data_request: Option<crate::models::PutSessionDataRequest>) -> Result<crate::models::PutSessionData200Response, Error<PutSessionDataError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/recipe/session/data", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = rid {
        local_var_req_builder = local_var_req_builder.header("rid", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = api_key {
        local_var_req_builder = local_var_req_builder.header("api-key", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.header("cdi-version", cdi_version.to_string());
    local_var_req_builder = local_var_req_builder.json(&put_session_data_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PutSessionDataError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Refresh a Session 
pub async fn refresh_session(configuration: &configuration::Configuration, cdi_version: &str, rid: Option<&str>, api_key: Option<&str>, refresh_session_request: Option<crate::models::RefreshSessionRequest>) -> Result<crate::models::RefreshSession200Response, Error<RefreshSessionError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/recipe/session/refresh", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = rid {
        local_var_req_builder = local_var_req_builder.header("rid", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = api_key {
        local_var_req_builder = local_var_req_builder.header("api-key", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.header("cdi-version", cdi_version.to_string());
    local_var_req_builder = local_var_req_builder.json(&refresh_session_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<RefreshSessionError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Regenerate a session 
pub async fn regenerate_session(configuration: &configuration::Configuration, cdi_version: &str, rid: Option<&str>, api_key: Option<&str>, regenerate_session_request: Option<crate::models::RegenerateSessionRequest>) -> Result<crate::models::RegenerateSession200Response, Error<RegenerateSessionError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/recipe/session/regenerate", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = rid {
        local_var_req_builder = local_var_req_builder.header("rid", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = api_key {
        local_var_req_builder = local_var_req_builder.header("api-key", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.header("cdi-version", cdi_version.to_string());
    local_var_req_builder = local_var_req_builder.json(&regenerate_session_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<RegenerateSessionError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Handshake for session 
pub async fn session_handshake(configuration: &configuration::Configuration, cdi_version: &str, rid: Option<&str>, api_key: Option<&str>) -> Result<crate::models::SessionHandshake200Response, Error<SessionHandshakeError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/recipe/handshake", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = rid {
        local_var_req_builder = local_var_req_builder.header("rid", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = api_key {
        local_var_req_builder = local_var_req_builder.header("api-key", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.header("cdi-version", cdi_version.to_string());

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SessionHandshakeError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Verify a Session 
pub async fn verify_session(configuration: &configuration::Configuration, cdi_version: &str, rid: Option<&str>, api_key: Option<&str>, verify_session_request: Option<crate::models::VerifySessionRequest>) -> Result<crate::models::VerifySession200Response, Error<VerifySessionError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/recipe/session/verify", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = rid {
        local_var_req_builder = local_var_req_builder.header("rid", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = api_key {
        local_var_req_builder = local_var_req_builder.header("api-key", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.header("cdi-version", cdi_version.to_string());
    local_var_req_builder = local_var_req_builder.json(&verify_session_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VerifySessionError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

