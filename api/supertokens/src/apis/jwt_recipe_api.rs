/*
 * Core Driver Interface
 *
 * This is the API exposed by the SuperTokens Core. To be consumed by your backend only.
 *
 * The version of the OpenAPI document: 2.15.1
 * Contact: team@supertokens.io
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`create_signed_jwt`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateSignedJwtError {
    Status400(String),
    Status404(crate::models::NotFound),
    Status500(crate::models::InternalError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`recipe_jwt_jwks_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RecipeJwtJwksGetError {
    Status400(String),
    Status404(crate::models::NotFound),
    Status500(crate::models::InternalError),
    UnknownValue(serde_json::Value),
}


/// Create a signed JWT 
pub async fn create_signed_jwt(configuration: &configuration::Configuration, cdi_version: &str, rid: Option<&str>, api_key: Option<&str>, create_signed_jwt_request: Option<crate::models::CreateSignedJwtRequest>) -> Result<crate::models::CreateSignedJwt200Response, Error<CreateSignedJwtError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/recipe/jwt", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = rid {
        local_var_req_builder = local_var_req_builder.header("rid", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = api_key {
        local_var_req_builder = local_var_req_builder.header("api-key", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.header("cdi-version", cdi_version.to_string());
    local_var_req_builder = local_var_req_builder.json(&create_signed_jwt_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateSignedJwtError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieve JWKs for JWT verification 
pub async fn recipe_jwt_jwks_get(configuration: &configuration::Configuration, cdi_version: &str, rid: Option<&str>, api_key: Option<&str>) -> Result<crate::models::RecipeJwtJwksGet200Response, Error<RecipeJwtJwksGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/recipe/jwt/jwks", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = rid {
        local_var_req_builder = local_var_req_builder.header("rid", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = api_key {
        local_var_req_builder = local_var_req_builder.header("api-key", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.header("cdi-version", cdi_version.to_string());

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<RecipeJwtJwksGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

